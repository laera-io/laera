name: Push to stable branch

on:
  push:
    branches: [stable]

env:
  FLUTTER_VERSION: 3.0.x
  RUBY_VERSION: "3.1"

jobs:
  lint-test-and-build:
    name: Lint, test, and send APK via Telegram
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/android/Gemfile
    steps:
      - name: Download Git sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all commits, tags, etc

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Flutter dependencies from cache
        uses: actions/cache@v3
        with:
          path: .pub-cache
          key: ${{ runner.os }}-${{ env.FLUTTER_VERSION }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.FLUTTER_VERSION }}-pub-

      - name: Lint and test
        run: make ci

      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true
          verbose: true
          file: ./coverage/lcov.info
          flags: unit

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install secrets
        run: |
          mkdir -p android/fastlane/keys
          echo "${{ secrets.KEYSTORE_JKS_B64 }}" | base64 -d > android/fastlane/keys/keystore.jks
          echo "${{ secrets.KEYSTORE_PROPERTIES_B64 }}" | base64 -d > android/fastlane/keys/keystore.properties
          echo "${{ secrets.GOOGLE_PLAY_API_KEY_JSON_B64 }}" | base64 -d > android/fastlane/keys/google_play_api_key.json

      - name: Build APK
        uses: maierj/fastlane-action@v2.2.1
        with:
          lane: build_apk
          subdirectory: android
          bundle-install-path: vendor/bundle
          skip-tracking: true

      - name: Send built APK to Telegram dev chat
        run: |
          output_file_dir=build/app/outputs/apk/release
          output_file_name=$(ls $output_file_dir | grep apk)
          curl \
            -F chat_id=${{ secrets.TELEGRAM_DEV_CHAT }} \
            -F document=@$output_file_dir/$output_file_name \
            -F parse_mode=MarkdownV2 \
            -F caption='
          ðŸ‘· test build

          repo: `${{ github.repository }}`
          workflow: `${{ github.workflow }}`
          branch/tag: `${{ github.ref }}`
          triggered by: `${{ github.actor }}`
          commit hash: `${{ github.sha }}`
          ' \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_DEV_BOT_TOKEN }}/sendDocument
